////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
I: Takes a start(number) and end(number)
O: returns array
*/

function range(start, end, step){
  if (start === end || step < 0){
    return [];
  }else if (step === undefined){
    var output = [];
    for (var i = start; i <= end; i++){
      output.push(i);
    }
  }else{
    var output = [];
    for (var i = start; i <= end; i+=step){
      output.push(i)
    }
  }
  return output;
  }



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  if (array.length === 0){//  base
    return 0; 
  }
  return array[0] + sum(array.slice(1));
};

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

  
function reverseArray(array, output = []) {
  if (array.length === 0){
    return output;
  }
output.push(array[array.length - 1]);
return reverseArray(array.slice(0, array.length - 1), output)
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// WILL BE INPUT ARRAY OF NUMBERS 
function arrayToList(array) {
  let rest = null;

  for (let i = array.length - 1; i >= 0; i--){
    rest = {value: array[i], rest: rest}; 
  }
  return rest;
}


////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/// takes input object////returns array
function listToArray(list, output = []) {
// base
if (list.rest === null){
  output.push(list.value)
  return output;
}
// recursion access outer level
output.push(list.value);
return listToArray(list.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  if (typeof x !== 'object' && typeof y !== 'object')//  determine if x and y are BOTH NOT objects
    return x === y;
  //  determine if either x or y is not an object
  if (typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  //create arrays of objects keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);
  //determine if xkeys and ykeys have different lengths
  if (xKeys.length !== yKeys.length){
    return false;
  }
  for (let i = 0; i < xKeys.length; i++){
    if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[yKeys[i]])){
      return false;
    }
  }
return true;
}
////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
